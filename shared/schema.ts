// @shared/schema.ts
import { z } from "zod";

// --- Constants ---
export const eventCategories = ['deadline', 'quiz', 'other'] as const;
export type EventCategory = typeof eventCategories[number];

// --- Base Schemas (representing documents in MongoDB) ---

// User Schema
export const userSchema = z.object({
  id: z.string(), // MongoDB _id is a string (ObjectId represented as string)
  username: z.string(),
  password: z.string(), // Keep password in the base schema for type safety, but don't expose it
  isAdmin: z.boolean().default(false),
});

// Event Schema
export const eventSchema = z.object({
  id: z.string(), // MongoDB _id is a string
  title: z.string().min(1, "Title is required"),
  description: z.string().optional(),
  category: z.enum(eventCategories),
  date: z.string().regex(/^\d{4}-\d{2}-\d{2}$/, "Invalid date format (YYYY-MM-DD)"),
  time: z.string().regex(/^\d{2}:\d{2}$/, "Invalid time format (HH:MM)"),
  location: z.string().optional(),
  createdById: z.string(), // Foreign key referencing User ID (string)
  // Add createdAt/updatedAt if you track them in Mongo
  // createdAt: z.date().optional(),
  // updatedAt: z.date().optional(),
});

// Resource Schema
export const resourceSchema = z.object({
  id: z.string(), // MongoDB _id is a string
  eventId: z.string(), // Foreign key referencing Event ID (string)
  filename: z.string(), // Name stored on disk/S3
  originalName: z.string(), // Original uploaded name
  filePath: z.string(), // Path to the stored file
  fileType: z.string(),
  fileSize: z.number(), // Keep size as number
  uploadedAt: z.date(),
  uploadedById: z.string(), // Foreign key referencing User ID (string)
});

// Notification Schema
export const notificationSchema = z.object({
  id: z.string(), // MongoDB _id is a string
  eventId: z.string().optional(), // Optional foreign key referencing Event ID (string)
  message: z.string(),
  notifyAt: z.preprocess(arg => new Date(arg as string), z.date()),
  sent: z.boolean().default(false),
});


// --- Insert Schemas (for creating new documents) ---

// Insert User Schema (omit 'id' as it's generated by Mongo)
export const insertUserSchema = userSchema.omit({ id: true }).pick({
  username: true,
  password: true,
  isAdmin: true,
});

// Insert Event Schema (omit 'id')
export const insertEventSchema = eventSchema.omit({ id: true }).pick({
  title: true,
  description: true,
  category: true,
  date: true,
  time: true,
  location: true,
  createdById: true, // Ensure this is included and is a string
});

// Insert Resource Schema (omit 'id', handle uploadedAt separately if needed)
export const insertResourceSchema = resourceSchema.omit({ id: true, uploadedAt: true }).extend({
    // Explicitly define fileSize as number if needed, Zod might infer correctly though
    fileSize: z.number().positive("File size must be positive"),
});


// Insert Notification Schema (omit 'id', 'sent')
export const insertNotificationSchema = notificationSchema.omit({ id: true, sent: true });


// --- Types ---
export type User = z.infer<typeof userSchema>;
export type InsertUser = z.infer<typeof insertUserSchema>;

export type Event = z.infer<typeof eventSchema>;
export type InsertEvent = z.infer<typeof insertEventSchema>;

export type Resource = z.infer<typeof resourceSchema>;
export type InsertResource = z.infer<typeof insertResourceSchema>;

export type Notification = z.infer<typeof notificationSchema>;
export type InsertNotification = z.infer<typeof insertNotificationSchema>;